//HintName: Some_Nested_Types_Two_PingHandler.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Blackwing.Generator source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using Blackwing.Contracts.Handlers;
using Blackwing.Contracts.Pipelines;
using Microsoft.Extensions.DependencyInjection;

namespace Blackwing.Generator.Some.Nested.Types.Two;

internal sealed class PingHandlerWrapper : IRequestHandler<global::Some.Nested.Types.Two.Ping, byte[]>
{
    private readonly IRequestPipelineDelegate<global::Some.Nested.Types.Two.Ping, byte[]> handler;

    public PingHandlerWrapper(
        global::Some.Nested.Types.Two.PingHandler handler,
        IEnumerable<IRequestPipeline<global::Some.Nested.Types.Two.Ping, byte[]>> behaviors)
    {
        var finalHandler = (IRequestPipelineDelegate<global::Some.Nested.Types.Two.Ping, byte[]>)handler.Handle;
        foreach (var pipeline in behaviors.Reverse())
        {
            var handlerCopy = finalHandler;
            var pipelineCopy = pipeline;
            finalHandler = (global::Some.Nested.Types.Two.Ping request, CancellationToken cancellationToken) => pipelineCopy.Handle(request, handlerCopy, cancellationToken);
        }
        this.handler = finalHandler;
    }

    public ValueTask<byte[]> Handle(global::Some.Nested.Types.Two.Ping request, CancellationToken cancellationToken = default)
    {
        return handler(request, cancellationToken);
    }
}

#nullable disable
